#!/usr/bin/env perl
# basic_preproc [-o outfile] inputfile [... inputfile]

# lines starting with numbers are BASIC code
# lines starting with '#include' include files at the current point
# lines starting with '#const' introduce substitution values
# lines starting with '#map' introduce token substitutions
# lines starting with a single-quote are ignores (treated as comments)
# duplicate line numbers are reported (original & current file & line nos) and cause a non-zero exit code
# substitutions are carried out only in BASIC lines and #const values
# BASIC lines are tokenised & repacked to remove unnecessary spaces

use 5.30.0;

use warnings FATAL => 'all';
use Getopt::Long;

my $outputFilename;

GetOptions(
    "output=s" => \$outputFilename,
) or die("Error in command line arguments\n");

my $fh;
if ($outputFilename)
{
    open $fh, ">", $outputFilename or die "Unable to open $outputFilename for writing: $!\n";
}
$fh = *STDOUT unless $fh;

my $errorCount = 0;
my %includedFiles;
my %basicLine;
my %const;
my %maps;

my @lineMatches = (
    { regexp => qr/^(?:'.*|)$/,     code => \&ignoreLine },
    { regexp => qr/^\d/a,           code => \&codeLine },
    { regexp => qr/^#\s*import/,    code => \&preprocessorImport },
    { regexp => qr/^#\s*const/,     code => \&preprocessorConst },
    { regexp => qr/^#\s*map/,       code => \&preprocessorMap },
    { regexp => qr/./,              code => \&invalidLine },
);
my $varMatch = qr/[a-z][a-z0-9_\.]*/i;

my $tk = retokenise->new();

for my $f ( @ARGV )
{
    loadBasic($f);
}

if (!$errorCount)
{
    my $output = '';
    for my $codeLineNo ( sort { $a <=> $b } keys %basicLine )
    {
        $tk->retokenise($codeLineNo, $basicLine{$codeLineNo});
        $output .= $basicLine{$codeLineNo}{tokenised_text} . "\n";
    }
    say $fh $output;
}

exit ($errorCount ? 1 : 0);

#-----------------

sub loadBasic
{
    my ($filename) = @_;

    return if (exists $includedFiles{$filename});

    my $fh = openFile( $filename );
    return if !defined $fh;

    my $fileLine = 0;
    for my $line (<$fh>)
    {
        ++$fileLine;

        $line =~ s/^\s+|\s+$//g;

        my $matched = 0;
        for my $match ( @lineMatches )
        {
            if ($line =~ m/$match->{regexp}/)
            {
                $match->{code}->($filename, $fileLine, $line);
                $matched = 1;
                last;
            }
        }
        if (!$matched)
        {
            say STDERR "ERROR: $filename/$fileLine Unknown line type: $line";
            ++$errorCount;
        }
    }
}

sub loadSymbols
{
    my ($filename, $param) = @_;

    return if (exists $includedFiles{$filename});

    my $fh = openFile( $filename );
    return if !defined $fh;

    my $fileLine = 0;
    my @scope;
    push @scope, $param if defined $param;
    for my $line (<$fh>)
    {
        ++$fileLine;

        $line =~ s/^\s+|\s+$//g;

        if ($line =~ m/^\.namespace ($varMatch) \{$/i)
        {
            push @scope, $1;
        }
        elsif ($line =~ m/^\.label ($varMatch)=\$([0-9a-f]*)( \{)?$/i)
        {
            my $name = join(".", @scope, $1);
            $const{$name} = { filename => $filename, fileLine => $fileLine, value => hex($2) };
            push @scope, $1 if defined $3;
        }
        elsif ($line eq '}')
        {
            pop @scope;
        }
        else
        {
            say STDERR "ERROR: $filename/$fileLine Unknown line type: $line";
            ++$errorCount;
        }
    }
}

sub openFile
{
    my ($filename) = @_;
    my $failed = 0;
    open my $fh, "<", $filename or $failed = 1;
    if ($failed)
    {
        say STDERR "Unable to open file $filename $!";
        ++$errorCount;
        return undef;
    }
    return $fh;
}

sub ignoreLine { }

sub preprocessorImport
{
    my ($filename, $fileLine, $line) = @_;

    if ($line =~ m/^#\s*import\s+([^,]+?)(?:\s*,\s*($varMatch))?$/i)
    {
        my $importFilename = $1;
        my $param = $2;
        if ($importFilename =~ m/\.sym$/i)
        {
            loadSymbols($importFilename, $param);
        }
        else
        {
            loadBasic($importFilename);
        }
    }
    else
    {
        say STDERR "ERROR: $filename/$fileLine Invalid or malformed import directive: $line";
        ++$errorCount;
    }
}

sub preprocessorConst
{
    my ($filename, $fileLine, $line) = @_;

    if ($line =~ m/^#\s*const\s+($varMatch)\s+(.*)/i)
    {
        if (exists $const{$1})
        {
            say STDERR "ERROR: $filename/$fileLine Constant already used in $const{$1}{filename}/$const{$1}{fileLine}";
            ++$errorCount;
        }
        else
        {
            my $key = $1;
            my $value = $2;
            $value =~ s( \{\{ \s* ( $varMatch ) \s* \}\} )($const{$1}{value} // "")ixeg;
            $const{$key} = { filename => $filename, fileLine => $fileLine, value => $value };
        }
    }
    else
    {
        say STDERR "ERROR: $filename/$fileLine Invalid or malformed const directive: $line";
        ++$errorCount;
    }
}

sub preprocessorMap
{
    my ($filename, $fileLine, $line) = @_;

    # TODO: Allow optional 3rd arg to specify the type
    if ($line =~ m/^#\s*map\s+(\S+)\s+(\S*)\s*$/i)
    {
        if (exists $maps{$1})
        {
            say STDERR "ERROR: $filename/$fileLine Map already set in $maps{$1}{filename}/$maps{$1}{fileLine}";
            ++$errorCount;
        }
        else
        {
            my $key = $1;
            my $value = $2;
            $value =~ s( \{\{ \s* ( $varMatch ) \s* \}\} )($maps{$1}{value} // "")ixeg;
            $maps{$key} = { filename => $filename, fileLine => $fileLine, value => $value };
            $tk->addTokenMapping( $key, 'REMAP', $value );
        }
    }
    else
    {
        say STDERR "ERROR: $filename/$fileLine Invalid or malformed map directive: $line";
        ++$errorCount;
    }
}

sub codeLine
{
    my ($filename, $fileLine, $line) = @_;

    my ($codeLineNo, $codeText) = ( $line =~ m/^(\d+)\s*(.*)/ );

    if (exists $basicLine{$codeLineNo})
    {
        say STDERR "ERROR: $filename/$fileLine Line number already used in $basicLine{$codeLineNo}{filename}/$basicLine{$codeLineNo}{fileLine}";
        ++$errorCount;
    }
    elsif ($codeText eq '')
    {
        say STDERR "ERROR: $filename/$fileLine Line number without code";
        ++$errorCount;
    }
    else
    {
        $codeText =~ s( \{\{ \s* ( $varMatch ) \s* \}\} )($const{$1}{value} // "")ixeg;
        $basicLine{$codeLineNo} = { filename => $filename, fileLine => $fileLine, text => $codeText, lineno => $codeLineNo };
    }
}

sub invalidLine
{
    my ($filename, $fileLine, $line) = @_;
    say STDERR "ERROR: $filename/$fileLine Invalid line : $line";
    ++$errorCount;
}

package tokenise
{
    use Class::Tiny;
    use List::MoreUtils qw(uniq);

    my %tokenType;
    my %tokenMap;

    BEGIN {
        %tokenType = (
            "TODO"      => 'not impl',
            "FUNC"      => 'function',
            "OP"        => 'operator',
            "CMD"       => ' command',
            "VAR"       => 'variable',
            "PUNCT"     => '   punct',
            "REMAP"     => '   remap',
            "OTHER"     => ' unknown',
            "NUMBER"    => '  number',
            "STRING"    => '  string',
            "SPECIAL"   => ' special',
        );

        %tokenMap = (
            'abs'       => { type => "FUNC" },
            'and'       => { type => "OP" },
            'asc'       => { type => "FUNC" },
            'atn'       => { type => "FUNC" },
            'chr$'      => { type => "FUNC" },
            'close'     => { type => "CMD" },
            'clr'       => { type => "CMD" },
            'cmd'       => { type => "CMD" },
            'cont'      => { type => "CMD" },
            'cos'       => { type => "FUNC" },
            'data'      => { type => "CMD" },
            'def'       => { type => "CMD" },
            'dim'       => { type => "CMD" },
            'end'       => { type => "CMD" },
            'exp'       => { type => "FUNC" },
            'fn'        => { type => "CMD" },
            'for'       => { type => "CMD" },
            'fre'       => { type => "FUNC" },
            'get'       => { type => "CMD" },
            'get#'      => { type => "CMD" },
            'gosub'     => { type => "CMD" },
            'goto'      => { type => "CMD" },
            'if'        => { type => "CMD" },
            'input'     => { type => "CMD" },
            'input#'    => { type => "CMD" },
            'int'       => { type => "FUNC" },
            'left$'     => { type => "FUNC" },
            'len'       => { type => "FUNC" },
            'let'       => { type => "CMD" },
            'list'      => { type => "CMD" },
            'load'      => { type => "CMD" },
            'log'       => { type => "FUNC" },
            'mid$'      => { type => "FUNC" },
            'new'       => { type => "CMD" },
            'next'      => { type => "CMD" },
            'not'       => { type => "OP" },
            'on'        => { type => "CMD" },
            'open'      => { type => "CMD" },
            'or'        => { type => "OP" },
            'peek'      => { type => "FUNC" },
            'poke'      => { type => "CMD" },
            'pos'       => { type => "FUNC" },
            'print'     => { type => "CMD" },
            '?'         => { type => "CMD", remap => 'print' },
            'print#'    => { type => "CMD" },
            'read'      => { type => "CMD" },
            'rem'       => { type => "CMD" },
            'restore'   => { type => "CMD" },
            'return'    => { type => "CMD" },
            'right'     => { type => "FUNC" },
            'rnd'       => { type => "FUNC" },
            'run'       => { type => "CMD" },
            'save'      => { type => "CMD" },
            'sgn'       => { type => "FUNC" },
            'sin'       => { type => "FUNC" },
            'spc'       => { type => "FUNC" },
            'sqr'       => { type => "FUNC" },
            'step'      => { type => "CMD" },
            'stop'      => { type => "CMD" },
            'str$'      => { type => "FUNC" },
            'sys'       => { type => "CMD" },
            'tab'       => { type => "FUNC" },
            'tan'       => { type => "FUNC" },
            'then'      => { type => "CMD" },
            'to'        => { type => "CMD" },
            'usr'       => { type => "FUNC" },
            'val'       => { type => "FUNC" },
            'verify'    => { type => "CMD" },
            'wait'      => { type => "CMD" },

            # Special variable handling
            'status'    => { type => "VAR", remap => 'st' },
            'statu'     => { type => "VAR", remap => 'st' },
            'stat'      => { type => "VAR", remap => 'st' },
            'sta'       => { type => "VAR", remap => 'st' },
            'st'        => { type => "VAR", remap => 'st' },

            'time'      => { type => "VAR", remap => 'ti' },
            'tim'       => { type => "VAR", remap => 'ti' },
            'ti'        => { type => "VAR", remap => 'ti' },

            'time$'     => { type => "VAR", remap => 'ti$' },
            'tim$'      => { type => "VAR", remap => 'ti$' },
            'ti$'       => { type => "VAR", remap => 'ti$' },

            # Operators
            '='         => { type => "OP" },
            '<'         => { type => "OP" },
            '<='        => { type => "OP" },
            '<>'        => { type => "OP" },
            '>'         => { type => "OP" },
            '>='        => { type => "OP" },
            '+'         => { type => "OP" },
            '-'         => { type => "OP" },
            '/'         => { type => "OP" },
            '*'         => { type => "OP" },
            '^'         => { type => "OP" },
            '('         => { type => "OP" },
            ')'         => { type => "OP" },

            # Punctuation
            ','         => { type => 'PUNCT' },
            ':'         => { type => 'PUNCT' },
            ';'         => { type => 'PUNCT' },

        );
    }

    sub BUILD {
        my ($self, $args) = @_;

        $self->{baseTokenType} = \%tokenType;
        $self->{baseTokenMap}  = \%tokenMap;
        $self->{userTokenType} = {};
        $self->{userTokenMap}  = {};
    }

    sub getTokenMapRegex {
        my ($self) = @_;
        if (!defined $self->{regex})
        {
            my @keywords = uniq(keys %{$self->{baseTokenMap}}, keys %{$self->{userTokenMap}});
            my @tokenSorted = sort { length($b) <=> length($a) or $a cmp $b } @keywords;
            @tokenSorted = map { quotemeta($_) } @tokenSorted;
            $self->{regex} = join '|', @tokenSorted;
        }
        return $self->{regex};
    }

    sub addTokenMapping
    {
        my ($self, $token, $type, $remap) = @_;

        $self->{userTokenMap}{$token} = { type => $type };
        $self->{userTokenMap}{$token}{remap} = $remap if defined $remap && $remap ne '';
        delete $self->{regex};
    }

    sub addTokenType
    {
        my ($self, $type, $desc) = @_;
        $self->{userTokenType}{$type} = $desc;
    }

    sub getTokenMapping
    {
        my ($self, $keyword) = @_;
        return $self->{userTokenMap}{$keyword} // $self->{baseTokenMap}{$keyword} // undef; 
    }

    sub getToken {
        my ($self, $in) = @_;

        my $tokenMatch = $self->getTokenMapRegex();
        my $return;

        $in =~ s/^\s+//;

        if ($in eq '')
        {
            $return = {
                type => 'EOL',
                value => '',
                remap => ''
            }
        }
        elsif ($in =~ s/^($tokenMatch)//)
        {
            my $detail = $self->getTokenMapping($1);
            $return = {
                type => $detail->{type},
                value => $1,
                remap => $detail->{remap} // $1
            }
        }
        elsif ($in =~ s/^([a-z][a-z0-9]*\$?)//)
        {
            $return = {
                type => 'VAR',
                value => $1,
                remap => $1
            }
        }
        elsif ($in =~ s/^([0-9]\.?[0-9]*|\.[0-9]*)//)
        {
            $return = {
                type => 'NUMBER',
                value => $1,
                remap => $1
            }
        }
        elsif ($in =~ s/^"([^"]*)"?//)
        {
            $return = {
                type => 'STRING',
                value => qq/"$1"/,
                remap => qq/"$1"/
            }
        }
        elsif ($in =~ s/^(\@[\@a-z])//)
        {
            $return = {
                type => 'SPECIAL',
                value => $1,
                remap => $1
            }
        }
        else
        {
            $return = undef;
        }

        return ($in, $return);
    }

    sub getAllTokens
    {
        my ($self, $codeText) = @_;

        my @tokenList;
        my $result;

        while ($codeText ne "")
        {
            ($codeText, $result) = $self->getToken($codeText);

            last if (!defined $result);
            push @tokenList, $result if ($result->{type} ne 'EOL');
        }

        return ($codeText, @tokenList);
    }
};

package retokenise
{
    use Class::Tiny;

    sub BUILD {
        my ($self, $args) = @_;

        $self->{tokenise} = tokenise->new();
    }

    sub retokenise
    {
        my ($self, $codeLineNo, $detail) = @_;

        my $tokenise = $self->{tokenise};
        my ($leftover, @tokenList) = $tokenise->getAllTokens( $detail->{text} );

        if ($leftover)
        {
            say "Failed to parse next token in code line $codeLineNo: $leftover";
                $errorCount++;
            }
            else
            {
            my $out = "";
            for my $token (@tokenList)
            {
                $out = $self->joinTokens($out, $token->{remap});
            }
            $detail->{tokenised_text} = $self->joinTokens($codeLineNo, $out);
            }
        }

    sub joinTokens
    {
        my ($self, $first, $second) = @_;

        # TODO: simple rules for now - replace with a better mechanism
        return $first if !defined $second || $second eq '';
        return $second if !defined $first || $first eq '';
        return $first . " " . $second if ($first =~ m/[0-9]$/ && $second =~ m/^[0-9]/);
        return $first . " " . $second if ($first =~ m/[a-z]$/ && $second =~ m/^[a-z]/);
        return $first . $second;
    }

    sub addTokenMapping
    {
        my ($self, $token, $type, $remap) = @_;

        my $tokenise = $self->{tokenise};
        return $tokenise->addTokenMapping($token, $type, $remap);
    }
};
